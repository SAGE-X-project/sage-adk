# Nginx Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sage-agent-ingress
  namespace: sage-system
  labels:
    app: sage-agent
  annotations:
    # Ingress class
    kubernetes.io/ingress.class: "nginx"

    # SSL/TLS
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "10"

    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"

    # Body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"

    # Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";

spec:
  tls:
  - hosts:
    - sage-agent.example.com
    - api.sage-agent.example.com
    secretName: sage-agent-tls

  rules:
  - host: sage-agent.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sage-agent
            port:
              number: 80

  - host: api.sage-agent.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sage-agent
            port:
              number: 80

---
# Istio Gateway (alternative to Ingress)
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: sage-agent-gateway
  namespace: sage-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: sage-agent-tls
    hosts:
    - sage-agent.example.com
    - api.sage-agent.example.com

  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - sage-agent.example.com
    - api.sage-agent.example.com
    tls:
      httpsRedirect: true

---
# Istio VirtualService
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: sage-agent-vs
  namespace: sage-system
spec:
  hosts:
  - sage-agent.example.com
  - api.sage-agent.example.com
  gateways:
  - sage-agent-gateway
  http:
  - match:
    - uri:
        prefix: "/api/"
    route:
    - destination:
        host: sage-agent
        port:
          number: 80
      weight: 100
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream

  - match:
    - uri:
        prefix: "/health/"
    route:
    - destination:
        host: sage-agent
        port:
          number: 80

  - match:
    - uri:
        prefix: "/"
    route:
    - destination:
        host: sage-agent
        port:
          number: 80

---
# AWS ALB Ingress (for AWS)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sage-agent-alb
  namespace: sage-system
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/...
    alb.ingress.kubernetes.io/healthcheck-path: /health/ready
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/success-codes: '200'
spec:
  rules:
  - host: sage-agent.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sage-agent
            port:
              number: 80

---
# GCP GCE Ingress (for GKE)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sage-agent-gce
  namespace: sage-system
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "sage-agent-ip"
    networking.gke.io/managed-certificates: "sage-agent-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
  - host: sage-agent.example.com
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: sage-agent
            port:
              number: 80

---
# Managed Certificate for GKE
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: sage-agent-cert
  namespace: sage-system
spec:
  domains:
  - sage-agent.example.com
  - api.sage-agent.example.com
